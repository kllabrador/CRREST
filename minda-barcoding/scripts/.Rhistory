tree
tree <- tree.base +
xlim (NA, 75)
tree
tree <- tree.base +
xlim (NA, 75) +
geom_point(data=bootstrap, col="red", size = 1) +
geom_point(data=tipLabel, aes(x = x, fill=family), pch=21, col="black", size = 2, alpha=0.75)
tree
knitr::opts_chunk$set(echo = TRUE
, results = 'hide'
, warning = FALSE
, message = FALSE
, fig.height = 5
, fig.width = 5
)
# Clear the global environment.
rm(list=ls())
# Set-up the working directory in the source file location:
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
wd <- getwd() # Do this after the working directory was set to source file location
# Assign directories to objects in the global environment
indir <- paste0("../INDIR/")
outdir <- paste0("../OUTDIR/")
scripts <- paste0("../scripts/")
# Check content of indir using list.files()
list.files(indir)
list.files(scripts)
pacman::p_load (ape, cowplot, tidyverse, janitor)
# Fasta file of the alignment
## Make sure that the alignment is done outside R.
infile_fasta <- paste0(indir,
"BOLD-output/20230902_minda-barcoding alignment.fasta")
infile_csv <- list.files(paste0(indir,
"BOLD-output"),
pattern = "\\.csv$",
full.names = T)
infile_csv_filenames <- list.files(paste0(indir,
"BOLD-output"),
pattern = "\\.csv$")
aln.fas <- read.FASTA(infile_fasta,
type = "DNA")
files.csv <- lapply (infile_csv,
read.csv,
na.strings = "N/A") %>%
map(., ~clean_names(.x))
names(files.csv) <- infile_csv_filenames
aln.metadata <- data.frame (label = names(aln.fas)) %>%
separate_wider_delim(label,
delim = "|",
names = c("process_id", "taxa_id", "sample_id", "bin", NA),
cols_remove = F
) %>%
separate_wider_delim(taxa_id,
delim = "_",
names = c("genus", "species"),
too_few = "align_start",
cols_remove = F
)
data.bkp <- as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
data.bkp <- ade4::as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
data.bkp <- as_tibble(aln.fas) %>%
full_join(aln.metadata)
data.bkp <- ape::as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
pacman::p_load (ape, bioseq, cowplot, tidyverse, janitor)
data.bkp <- ape::as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
data.bkp <- as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
data.bkp
knitr::opts_chunk$set(echo = TRUE
, results = 'hide'
, warning = FALSE
, message = FALSE
, fig.height = 5
, fig.width = 5
)
# Clear the global environment.
rm(list=ls())
# Set-up the working directory in the source file location:
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
wd <- getwd() # Do this after the working directory was set to source file location
# Assign directories to objects in the global environment
indir <- paste0("../INDIR/")
outdir <- paste0("../OUTDIR/")
scripts <- paste0("../scripts/")
# Check content of indir using list.files()
list.files(indir)
list.files(scripts)
pacman::p_load (ape, bioseq, cowplot, tidyverse, janitor)
# Fasta file of the alignment
## Make sure that the alignment is done outside R.
infile_fasta <- paste0(indir,
"BOLD-output/20230902_minda-barcoding alignment.fasta")
infile_csv <- list.files(paste0(indir,
"BOLD-output"),
pattern = "\\.csv$",
full.names = T)
infile_csv_filenames <- list.files(paste0(indir,
"BOLD-output"),
pattern = "\\.csv$")
aln.fas <- read.FASTA(infile_fasta,
type = "DNA")
files.csv <- lapply (infile_csv,
read.csv,
na.strings = "N/A") %>%
map(., ~clean_names(.x))
names(files.csv) <- infile_csv_filenames
aln.metadata <- data.frame (label = names(aln.fas)) %>%
separate_wider_delim(label,
delim = "|",
names = c("process_id", "taxa_id", "sample_id", "bin", NA),
cols_remove = F
) %>%
separate_wider_delim(taxa_id,
delim = "_",
names = c("genus", "species"),
too_few = "align_start",
cols_remove = F
)
data.bkp <- as_tibble.DNAbin(aln.fas) %>%
full_join(aln.metadata)
# Select only the columns needed
# aln.fas <- data_bkp %>%
#   mutate (mod_label = paste (taxa_id, sample_id, bin, sep = "|")) %>%
#   select (mod_label, sequence) %>%
#   as_DNAbin (labels = mod_label,
#              sequences = sequence) %>%
#   as.matrix
# write.FASTA(phylo_aln,
#             file = paste0(outdir, "phylo_aln.fas"),
#             header = NULL,
#             append = FALSE)
taxo_info <- files.csv$`project-metadata_taxonomy.csv`
family_count <- taxo_info %>%
distinct (family, species) %>%
group_by (family) %>%
summarize (count = n() ) %>%
ungroup()
plot_family_count <-
ggplot (family_count,
aes (x = reorder(family, count, decreasing = T),
y = count)
) +
geom_col(fill = "gray80",
col = "black",
position = "dodge") +
theme_classic()  +
labs (x = "Family",
y = "Number of species") +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle=90,
vjust = 0.25,
hjust = 1,
size = 7))
plot_family_count
ggsave(plot_family_count,
file = paste0(outdir,
"family-count_barplot.png"),
height = 5,
width = 7,
units = "in",
dpi = 330
)
species.dist <- files.csv$`divergence_within-species.csv` %>%
mutate (level = "species")
genus.dist <- files.csv$`divergence_wthin-genus.csv` %>%
mutate (level = "genus")
family.dist <- files.csv$`divergence_within-family.csv` %>%
mutate (level = "family")
dist.df <- rbind (species.dist,
genus.dist,
family.dist) %>%
mutate (level = fct_relevel(level, "species", "genus", "family"))
plot_distance_histogram <-
ggplot(dist.df, aes(x = distance, fill = level)) +
geom_histogram(position = "dodge",
col = "black",
size = 0.25
) +
coord_cartesian(expand = F) +
scale_x_continuous(breaks = seq(0, 30, by=2)) +
labs(x = "K2P Genetic Distance (%)",
y = "Frequency",
fill = "Taxonomic\nLevel"
) +
theme_classic() +
scale_fill_brewer(palette = "Set1")
plot_distance_histogram
ggsave(plot_distance_histogram,
file = paste0(outdir,
"K2P-distances_histogram.png"),
height = 3.5,
width = 6,
units = "in",
dpi = 330
)
plot_distance_boxplot <-
ggplot(dist.df, aes(x = level, y = distance, fill = level)) +
geom_boxplot(#col="black",
position = "dodge") +
labs(x = "Taxonomic Level",
y = "K2P Genetic Distance (%)") +
guides (fill = "none") +
scale_fill_brewer(palette = "Set1") +
theme_classic()
plot_distance_boxplot
ggsave(plot_distance_boxplot,
file = paste0(outdir,
"K2P-distances_boxplot.png"),
height = 3.5,
width = 3.5,
units = "in",
dpi = 330
)
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
)
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "black",
size = 0.25
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "Frequency",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram
barcode_gap <- files.csv$barcode_gap_analysis.csv
plot_barcode_gap_scatterplot <-
ggplot (data = barcode_gap,
aes (x = max_intra_sp,
y = distance_to_nn)
) +
geom_jitter(pch=21,
fill = "black",
alpha = 0.50,
col = "black",
size = 1.25) +
theme_classic() +
coord_cartesian(expand = F) +
lims (x = c(-0.5,30),
y = c(-0.5,30)
) +
labs (x = "Maximum Intra-specific Distance (%)",
y = "Interspecific (NN) Distance (%)") +
geom_abline(intercept = 0, lty = 2)
plot_barcode_gap_scatterplot
fig1 <-
ggdraw() +
# Draw main plot
draw_plot(plot_family_count) +
# Draw inset 1
draw_plot(plot_distance_histogram +
labs(fill = NULL) +
theme(axis.text = element_text(size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
legend.key.size = unit(0.25, "cm"),
legend.position = "top"
),
x = 0.12,
y = 0.65,
width=0.45,
height=0.35) +
# Draw inset 2
draw_plot(plot_barcode_gap_histogram +
theme(axis.text = element_text(size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
legend.key.size = unit(0.25, "cm"),
legend.position = "top"
),
x = 0.55,
y = 0.65,
width=0.45,
height=0.35) +
# Draw inset 3
draw_plot(plot_barcode_gap_scatterplot +
theme(axis.text = element_text(size = 6),
axis.title = element_text(size = 7),
legend.title = element_text(size = 7),
legend.text = element_text(size = 7),
legend.key.size = unit(0.25, "cm"),
legend.position = "top"
),
x = 0.55,
y = 0.35,
width=0.45,
height=0.25
) +
draw_plot_label(
c("A", "B", "C", "D"),
c(0,0.15, 0.55, 0.55),
c(1, 1, 1, 0.65),
size = c(11, 11, 11, 11)
)
fig1
ggsave(fig1,
file = paste0(outdir,
"fig1_data-description.png"),
height = 6.5,
width = 7,
units = "in",
dpi = 350
)
bin_concordant <- files.csv$`binDiscordance-CONCORDANT-BINS.csv`
bin_discordant <- files.csv$`binDiscordance-DISCORDANT-BINS.csv`
bin_singleton <- files.csv$`binDiscordance-SINGLETON-BINS.csv`
bin_concordant
bin_concordant
taxo_info
family_count
family_count$count %>% sum()
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (family, genus) %>%
summarize (count = n() ) %>%
ungroup()
family_count
family_count$count %>% sum
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (family) %>%
summarize (count = n() ) %>%
ungroup()
family_count
nrow(family_count)
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (genus) %>%
summarize (count = n() ) %>%
ungroup()
family_count
nrow(family_count
)
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (family, genus) %>%
summarize (count = n() ) %>%
ungroup()
family_count
nrow(family_count)
plot_family_count <-
ggplot (family_count,
aes (x = reorder(family, count, decreasing = T),
y = count)
) +
geom_col(fill = "gray80",
col = "black",
position = "dodge") +
theme_classic()  +
labs (x = "Family",
y = "Number of species") +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle=90,
vjust = 0.25,
hjust = 1,
size = 7))
plot_family_count
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (family) %>%
summarize (count = n() ) %>%
ungroup()
plot_family_count <-
ggplot (family_count,
aes (x = reorder(family, count, decreasing = T),
y = count)
) +
geom_col(fill = "gray80",
col = "black",
position = "dodge") +
theme_classic()  +
labs (x = "Family",
y = "Number of species") +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle=90,
vjust = 0.25,
hjust = 1,
size = 7))
plot_family_count
family_count
View(family_count)
filter (family_count, count == 1)
filter (family_count, count == 1) %>% nrow()
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (genus) %>%
summarize (count = n() ) %>%
ungroup()
family_count <- taxo_info %>%
distinct (family, genus, species) %>%
group_by (family) %>%
summarize (count = n() ) %>%
ungroup()
dist.df
view(dist.df)
write(dist.df, paste0(outdir, "distances.summary.csv"))
dist.df
nrow(dist.df)
write(dist.df, file = paste0(outdir, "distances.summary.csv"))
dist.df
dist.stats <- dist.df %>%
group_by(level) %>%
rstatix::get_summary_stats(distance)
dist.stats
View(dist.stats
)
barcode_gap
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
)
barcode_gap
barcode_gap.stats <- barcode_gap %>%
group_by(comp) %>%
rstatix::get_summary_stats(dist)
view(barcode_gap.stats)
view(barcode_gap)
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
)
view(barcode_gap)
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
)
barcode_gap
barcode_gap <- files.csv$barcode_gap_analysis.csv
nrow(barcode_gap)
knitr::opts_chunk$set(echo = TRUE
, results = 'hide'
, warning = FALSE
, message = FALSE
, fig.height = 5
, fig.width = 5
)
pacman::p_load (ape, bioseq, cowplot, tidyverse, janitor, phangorn)
infile_fasta
list.files(outdir)
aln.fas <- read.FASTA(paste0(oudir, "phylo_aln.fasta"),
type = "DNA")
aln.fas <- read.FASTA(paste0(outdir, "phylo_aln.fasta"),
type = "DNA")
aln.fas
aln.fas <- read.FASTA(paste0(outdir, "phylo_aln.fasta"),
type = "DNA")
# Conver collapsed alignment into a PhyDat object
pd<-as.phyDat(aln.fas)
##test models, select lowest AIC
mt <- modelTest(pd, multicore = TRUE, mc.cores= 6)
View(mt)
##initial fit, use best fit model from prev chunk
fit <- as.pml(mt)
fit
class(mt)
?modelTest
?as.pml
class(fit)
class(mt)
?modelTest
?as.pml
##initial fit, use best fit model from prev chunk
fit <- as.pml(mt, model="GTR")
fit
##initial fit, use best fit model from prev chunk
fit <- as.pml(mt, model="GTR+G+I")
##initial fit, use best fit model from prev chunk
fit <- as.pml(mt, model="GTR+G(4)+I")
fit
##MAKE SURE TO CHANGE OPTIONS DEPENDING ON YOUR SELECTED MODEL.
#?optim.pml gives guidance on how to set optBf and optQ
#optInv and optGamma should be set depending on whether your model includes +I and/or +G parameters
fit.opt <- optim.pml(fit,
optBf=TRUE,
optQ=TRUE,
optInv=TRUE,
optGamma=TRUE,
rearrangement = "NNI",
control = pml.control(trace = 1)
)
fit.opt
#main= sets the plot title
plot(fit.opt,
main="GTR+G(4)+I")
#bootstrap model
bs <- bootstrap.pml(fit.opt,
bs=1000,
optNni=TRUE,
multicore=TRUE,
mc.cores = 6)
