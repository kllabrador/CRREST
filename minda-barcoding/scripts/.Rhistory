labels = c("A", NA)
)
fig3
ggsave(fig3,
file = paste0(outdir,
"fig3_genetic-distances.png"),
height = 5,
width = 7,
units = "in",
dpi = 330
)
# WITHIN SPECIES
seq_list_species <- df %>%
group_by (scientific_name) %>%
filter (n() > 1) %>%
split (., .$scientific_name) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
seq_list_species <- df %>%
group_by (scientific_name) %>%
filter (n() > 1)
seq_list_species
seq_list_species$species
seq_list_species$scientific_name
seq_list_species$scientific_name %>% sort()
seq_list_species$scientific_name %>% sort() %>% table
seq_list_species$scientific_name %>% sort() %>% table %>% length
seq_list_genus <- df %>%
group_by (genus) %>%
filter (n() > 1)
seq_list_genus$genus
seq_list_genus$genus %>% sort %>% table
seq_list_genus$genus %>% table
seq_list_genus$genus %>% table %>% sort
seq_list_species$scientific_name %>% table %>% sort
seq_list_genus$genus %>% table %>% sort
# WITHIN GENUS
seq_list_genus <- df %>%
group_by (genus) %>% tabs()
# WITHIN GENUS
seq_list_genus <- df %>%
group_by (genus) %>% table()
seq_list_species <- df %>%
group_by (scientific_name)
seq_list_species$species %>% table() %>% sort
seq_list_species$scientific_name %>% table() %>% sort
# WITHIN SPECIES
seq_list_species <- df %>%
group_by (scientific_name) %>%
# exclude species with only one sequence
filter (n() > 1)
seq_list_species$scientific_name %>% table() %>% sort
seq_list_genus <- df %>%
group_by (genus) %>%
seq_list_genus <- df %>%
group_by (genus)
seq_list_genus$genus %>% table() %>% sort
seq_list_genus <- df %>%
group_by (genus) %>%
# exclude genus with only one family
filter (n() > 1)
seq_list_genus$genus %>% table() %>% sort
seq_list_family <- df %>%
group_by (family)
seq_list_family$genus %>% table() %>% sort()
# WITHIN FAMILY
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$genus %>% table() %>% sort()
# WITHIN FAMILY
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$family %>% table() %>% sort()
seq_list_family$family %>% table() %>% sort()# WITHIN FAMILY
seq_list_family <- df %>%
group_by (genus) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$family %>% table() %>% sort()
seq_list_family$genus %>% table() %>% sort()
seq_list_family <- df %>%
group_by (genus)
seq_list_family$genus %>% table() %>% sort()
seq_list_family <- df %>%
group_by (genus) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$genus %>% table() %>% sort()
seq_list_family$family %>% table() %>% sort()
seq_list_family <- df %>%
group_by (genus)
seq_list_family$family %>% table() %>% sort()
seq_list_family <- df %>%
group_by (genus) %>%
# exclude families wi
seq_list_family <- df %>%
group_by (genus) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$family %>% table() %>% sort
# WITHIN FAMILY
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1) %>%
seq_list_family$family %>% table() %>% sort
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1) %>%
# WITHIN FAMILY
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$family %>% table() %>% sort
seq_list_genus <- df %>%
group_by (species) %>%
# exclude genus with only one family
filter (n() > 1)
seq_list_genus$genus %>% table() %>% sort()
seq_list_genus$scientific_name %>% table() %>% sort()
seq_list_genus <- df %>%
group_by (scientific_name) %>%
# exclude genus with only one family
filter (n() > 1)
seq_list_genus$genus %>% table() %>% sort()
# WITHIN GENUS
seq_list_genus <- df %>%
group_by (scientific_name) %>%
# exclude genus with only one family
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one family
group_by (scientific_name) %>%
filter (n() > 1) %>%
# group by genus
group_by(genus) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.genus.df <- calculate_pairwise_k80(seq_list_genus, model = "K80", level = "genus") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2)
nrow(k80.genus.df)
view(k80.genus.df)
view(k80.genus.df)
view(k80.genus.df)
seq_list_genus <- df %>%
# exclude genus with only one family
group_by (scientific_name) %>%
filter (n() > 1) %>%
# group by genus
group_by(genus) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.genus.df <- calculate_pairwise_k80(seq_list_genus, model = "K80", level = "genus") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2)
write.csv(k80.genus.df, "trial")
write.csv(k80.genus.df, "trial.csv")
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one family
group_by (genus) %>%
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.genus.df <- calculate_pairwise_k80(seq_list_genus, model = "K80", level = "genus") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2)
k80.species.df %>% nrow()
write.csv(k80.genus.df, "trial.csv")
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one family
group_by (genus) %>%
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.genus.df <- calculate_pairwise_k80(seq_list_genus, model = "K80", level = "genus") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2)
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1) %>%
split (., .$family) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$genus %>% table() %>% sort()
seq_list_genus <- df %>%
# exclude genus with only one family
group_by (genus) %>%
filter (n() > 1)
seq_list_genus$scientific_name %>% table() %>% sort()
seq_list_genus$scientific_name %>% table() %>% sort() %>% length()
seq_list_genus$genus %>% table() %>% sort() %>% length()
seq_list_genus$genus %>% table() %>% sort()
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$scientific_name %>% table %>% sort
seq_list_family$genus %>% table %>% sort
seq_list_family$family %>% table %>% sort
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1) %>%
split (., .$family) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.family.df <- calculate_pairwise_k80(seq_list_family, model = "K80", level = "family") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2) %>%
# Remove intra-genera comparisons
separate (col = species_1, into = c("genus_1", NA), remove = F, sep = "\\ ") %>%
separate (col = species_2, into = c("genus_2", NA), remove = F, sep = "\\ ") %>%
filter (genus_1 != genus_2) %>%
select (-c(genus_1, genus_2))
dist.df <- rbind (k80.species.df,
k80.genus.df,
k80.family.df) %>%
mutate (level = fct_relevel(level, "species", "genus", "family"))
?dist.dna
source("//wsl.localhost/Ubuntu/home/user/Documents_Ubuntu/CRREST/minda-barcoding/scripts/calculate-K2P.R", echo=TRUE)
write.csv(k80.family.df, paste0(outdir, "pairwise-k2p-distance.csv"))
write.csv(dist.df, paste0(outdir, "pairwise-k2p-distance.csv"))
seq_list_species
seq_list_species %>% length()
names(seq_list_species)
nrow(k80.species.df)
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one representative
group_by (genus) %>%
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.genus.df <- calculate_pairwise_k80(seq_list_genus, model = "K80", level = "genus") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2)
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one representative
group_by (genus) %>%
filter (n() > 1)
seq_list_genus$species %>% unique %>% length()
seq_list_genus$species %>% table() %>% sort
seq_list_genus$scientific_name %>% table() %>% sort
seq_list_genus$scientific_name %>% table() %>% sort %>% length()
length (seq_list_species)
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one representative
group_by (genus) %>%
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
seq_list_genus
seq_list_genus %>% length()
seq_list_genus <- df %>%
# exclude genus with only one representative
group_by (genus) %>%
filter (n() > 1)
seq_list_genus$scientific_name %>% table %>% sort %>% length()
seq_list_genus$scientific_name %>% unique %>% legnth
seq_list_genus$scientific_name %>% unique %>% length
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one representative
group_by (genus) %>%
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
# WITHIN GENUS
seq_list_genus <- df %>%
# exclude genus with only one representative
group_by (genus) %>%
filter (n() > 1) %>%
split (., .$genus) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.genus.df <- calculate_pairwise_k80(seq_list_genus, model = "K80", level = "genus") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2)
dim(k80.genus.df)
seq_list_family
seq_list_family %>% length()
# WITHIN FAMILY
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1)
seq_list_family$genus %>% unique %>% length())
seq_list_family$genus %>% unique %>% length()
seq_list_family$genus %>% table %>% sort
seq_list_family$genus %>% table %>% sort %>% length()
# WITHIN FAMILY
seq_list_family <- df %>%
group_by (family) %>%
# exclude families with only one genus
filter (n() > 1) %>%
split (., .$family) %>%
map (~.x %>% as_DNAbin(labels = label, sequences = sequence))
k80.family.df <- calculate_pairwise_k80(seq_list_family, model = "K80", level = "family") %>%
# Remove intraspecific comparisons
separate (col = taxa_1, into = c("species_1", "process_id_1"), remove = T, sep = "\\|") %>%
separate (col = taxa_2, into = c("species_2", "process_id_2"), remove = T, sep ="\\|") %>%
filter (species_1 != species_2) %>%
# Remove intra-genera comparisons
separate (col = species_1, into = c("genus_1", NA), remove = F, sep = "\\ ") %>%
separate (col = species_2, into = c("genus_2", NA), remove = F, sep = "\\ ") %>%
filter (genus_1 != genus_2) %>%
select (-c(genus_1, genus_2))
dim (k80.family.df)
barcode_gap
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
theme(legend.text = element_text(size = 7))
barcode_gap <- files.csv$barcode_gap_analysis.csv %>%
pivot_longer(cols = c(mean_intra_sp,max_intra_sp, distance_to_nn),
names_to = "comp",
values_to = "dist"
) %>%
na.omit() %>%
mutate (comp = case_when (grepl("max_intra_sp", comp) ~ "intraspecific (max)",
grepl("distance_to_nn", comp) ~ "interspecific (NN)",
T ~ comp)) %>%
group_by (comp)
barcode_gap.stats <- barcode_gap %>%
group_by(comp) %>%
get_summary_stats(dist)
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
scale_y_continuous(labels = scale::"log") +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
scale_y_continuous(labels = scales::"log") +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
scale_y_continuous(labels = scales::"log10") +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
scale_y_log10() +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
scale_y_continuous(trans="log10") +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram
plot_barcode_gap_histogram <-
ggplot (data = barcode_gap %>% filter (comp != "mean_intra_sp"),
aes (x = dist,
fill = comp)
) +
geom_histogram(position="dodge",
col = "white",
size = 0.25,
) +
coord_cartesian(expand = F) +
theme_classic() +
labs (x = "K2P Genetic Distance (%)",
y = "No. of Pairwise Comparison",
fill = NULL) +
scale_fill_brewer(palette = "Set1",
direction = -1,
labels = c("interspecific\n(NN)", "intraspecific\n(max)")
) +
theme(legend.text = element_text(size = 7))
plot_barcode_gap_histogram
